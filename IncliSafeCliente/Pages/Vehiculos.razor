
@page "/vehiculos"
@using IncliSafe.Cliente.Models
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Gestión de Vehículos</MudText>

    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudTextField @bind-Value="nuevoVehiculo.Placa" Label="Placa" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudTextField @bind-Value="nuevoVehiculo.Marca" Label="Marca" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudTextField @bind-Value="nuevoVehiculo.Modelo" Label="Modelo" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudButton Color="Color.Primary" OnClick="GuardarVehiculo">Agregar Vehículo</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudTable Items="@vehiculos" Dense="true" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Placa</MudTh>
            <MudTh>Marca</MudTh>
            <MudTh>Modelo</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Placa">@context.Placa</MudTd>
            <MudTd DataLabel="Marca">@context.Marca</MudTd>
            <MudTd DataLabel="Modelo">@context.Modelo</MudTd>
            <MudTd DataLabel="Estado">@context.Estado</MudTd>
            <MudTd>
                <MudButtonGroup>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<Vehiculo> vehiculos = new();
    private Vehiculo nuevoVehiculo = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarVehiculos();
    }

    private async Task CargarVehiculos()
    {
        try
        {
            vehiculos = await Http.GetFromJsonAsync<List<Vehiculo>>("http://0.0.0.0:5000/api/vehiculos") ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al cargar vehículos: " + ex.Message, Severity.Error);
        }
    }

    private async Task GuardarVehiculo()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://0.0.0.0:5000/api/vehiculos", nuevoVehiculo);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Vehículo guardado correctamente", Severity.Success);
                nuevoVehiculo = new();
                await CargarVehiculos();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al guardar vehículo: " + ex.Message, Severity.Error);
        }
    }
}
