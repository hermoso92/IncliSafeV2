@page "/dashboard"
@inject IDobackService DobackService
@inject IVehicleService VehicleService
@inject IPredictiveAnalysisService PredictiveService
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject IDobackAnalysisService DobackAnalysisService
@inject IAlertService AlertService
@attribute [Authorize]
@using IncliSafe.Client.Services.Extensions
@using IncliSafe.Shared.Models.Analysis
@using IncliSafe.Shared.Models.Notifications
@using IncliSafe.Client.Services.Interfaces
@using MudBlazor
@using IncliSafe.Shared.Models
@using IncliSafe.Shared.Models.DTOs
@using IncliSafe.Shared.Models.Analysis.Core

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid>
        <!-- Resumen General -->
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h5">Dashboard</MudText>
                        <MudText Typo="Typo.subtitle1">Resumen de Operaciones</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6" Class="d-flex justify-end align-center">
                        <MudButton Variant="Variant.Outlined"
                                 StartIcon="@Icons.Material.Filled.Refresh"
                                 OnClick="RefreshData">
                            Actualizar
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Métricas Principales -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4">
                <MudText>Estabilidad</MudText>
                <MudText Typo="Typo.h3">
                    @(_metrics.StabilityScore.ToString("P0"))
                </MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4">
                <MudText>Seguridad</MudText>
                <MudText Typo="Typo.h3">
                    @(_metrics.SafetyScore.ToString("P0"))
                </MudText>
            </MudPaper>
        </MudItem>

        <!-- Predicciones -->
        <MudItem xs="12" md="9">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Predicciones</MudText>
                <div id="dashboardPredictionChart" style="height: 200px;"></div>
            </MudPaper>
        </MudItem>

        <!-- Alertas Recientes -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Alertas Recientes</MudText>
                <MudList Dense="true">
                    @foreach (var alert in _recentAlerts)
                    {
                        <MudListItem>
                            <MudChip Color="@GetAlertColor(alert.Severity)" Size="Size.Small" Class="mr-2">
                                @alert.Severity
                            </MudChip>
                            <MudText Typo="Typo.body2">@alert.Message</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Primary">
                                @alert.CreatedAt.ToLocalTime().ToString("g")
                            </MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Anomalías Detectadas -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Anomalías Detectadas</MudText>
                <MudTable Items="@_anomalies" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Tipo</MudTh>
                        <MudTh>Valor</MudTh>
                        <MudTh>Desviación</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudChip Color="@GetAnomalyColor(context)" Size="Size.Small">
                                @context.Type
                            </MudChip>
                        </MudTd>
                        <MudTd>@context.Value.ToString("N2")</MudTd>
                        <MudTd>@context.Deviation.ToString("N1")σ</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Info"
                                         OnClick="@(() => ShowAnomalyDetails(context))"/>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Análisis de Tendencias -->
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Análisis de Tendencias</MudText>
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudText>Corto Plazo</MudText>
                                <MudText Typo="Typo.h4" Color="@GetTrendColor(_metrics.Trends.ShortTerm.Value)">
                                    @GetTrendIndicator(_metrics.Trends.ShortTerm.Direction)
                                </MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudText>Medio Plazo</MudText>
                                <MudText Typo="Typo.h4" Color="@GetTrendColor(_metrics.Trends.MediumTerm.Value)">
                                    @GetTrendIndicator(_metrics.Trends.MediumTerm.Direction)
                                </MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudText>Largo Plazo</MudText>
                                <MudText Typo="Typo.h4" Color="@GetTrendColor(_metrics.Trends.LongTerm.Value)">
                                    @GetTrendIndicator(_metrics.Trends.LongTerm.Direction)
                                </MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Alert> _recentAlerts = new();
    private List<Anomaly> _anomalies = new();
    private DashboardMetrics _metrics = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        _recentAlerts = (await AlertService.GetRecentAlertsAsync()).ToList();
        await UpdateCharts();
    }

    private async Task UpdateCharts()
    {
        await JS.InvokeVoidAsync("updateDashboardCharts", new
        {
            Metrics = _metrics,
            Trends = _metrics.Trends
        });
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }

    private Color GetStabilityColor(decimal value) => value switch
    {
        > 0.8m => Color.Success,
        > 0.5m => Color.Warning,
        _ => Color.Error
    };

    private Color GetAlertColor(NotificationSeverity severity) => severity switch
    {
        NotificationSeverity.Info => Color.Info,
        NotificationSeverity.Success => Color.Success,
        NotificationSeverity.Warning => Color.Warning,
        NotificationSeverity.Error => Color.Error,
        NotificationSeverity.Critical => Color.Error,
        _ => Color.Default
    };

    private Color GetAnomalyColor(Anomaly anomaly) => anomaly.Severity switch
    {
        > 0.8M => Color.Error,
        > 0.5M => Color.Warning,
        _ => Color.Info
    };

    private Color GetTrendColor(decimal value) => value switch
    {
        > 0M => Color.Success,
        < 0M => Color.Error,
        _ => Color.Warning
    };

    private string GetTrendIndicator(string value)
    {
        return value switch
        {
            "Positivo" => "↑",
            "Negativo" => "↓",
            _ => "→"
        };
    }

    private async Task ShowAnomalyDetails(Anomaly anomaly)
    {
        var parameters = new DialogParameters
        {
            ["Anomaly"] = anomaly
        };
        await DialogService.ShowAsync<AnomalyDetailsDialog>("Detalles de Anomalía", parameters);
    }

    private decimal ConvertToDecimal(double value) => Convert.ToDecimal(value);
    private string GetDirection(decimal value) => value > 0 ? "↑" : value < 0 ? "↓" : "→";

    private string GetTrendDirection(string value)
    {
        return value switch
        {
            "Positivo" => "↑",
            "Negativo" => "↓",
            _ => "→"
        };
    }

    private string GetTrendValue(decimal value)
    {
        return value switch
        {
            > 0.7M => "Positivo",
            < -0.7M => "Negativo",
            _ => "Neutral"
        };
    }
}
