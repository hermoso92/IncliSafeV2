
@page "/vehiculos"
@using IncliSafe.Cliente.Models
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Gestión de Vehículos</MudText>

    <MudButton Color="Color.Primary" OnClick="@(() => OpenDialog(new Vehiculo()))" Class="mb-4">
        Nuevo Vehículo
    </MudButton>

    <MudTable Items="@vehiculos" Dense="true" Hover="true" Loading="@loading">
        <HeaderContent>
            <MudTh>Placa</MudTh>
            <MudTh>Marca</MudTh>
            <MudTh>Modelo</MudTh>
            <MudTh>Año</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Placa">@context.Placa</MudTd>
            <MudTd DataLabel="Marca">@context.Marca</MudTd>
            <MudTd DataLabel="Modelo">@context.Modelo</MudTd>
            <MudTd DataLabel="Año">@context.Año</MudTd>
            <MudTd DataLabel="Estado">@context.Estado</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => OpenDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteVehiculo(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<Vehiculo> vehiculos = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadVehiculos();
    }

    private async Task LoadVehiculos()
    {
        try
        {
            vehiculos = await Http.GetFromJsonAsync<List<Vehiculo>>("api/vehiculos") ?? new();
            loading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al cargar vehículos: " + ex.Message, Severity.Error);
        }
    }

    private async Task OpenDialog(Vehiculo vehiculo)
    {
        var parameters = new DialogParameters
        {
            ["Vehiculo"] = vehiculo
        };

        var dialog = await DialogService.ShowAsync<VehiculoDialog>("Vehículo", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadVehiculos();
        }
    }

    private async Task DeleteVehiculo(Vehiculo vehiculo)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Confirmar",
            "¿Está seguro de eliminar este vehículo?",
            yesText: "Eliminar",
            noText: "Cancelar"
        );

        if (confirm ?? false)
        {
            try
            {
                await Http.DeleteAsync($"api/vehiculos/{vehiculo.Id}");
                await LoadVehiculos();
                Snackbar.Add("Vehículo eliminado correctamente", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error al eliminar vehículo: " + ex.Message, Severity.Error);
            }
        }
    }
}
