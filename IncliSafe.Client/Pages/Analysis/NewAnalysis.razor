@page "/analysis/new"
@using IncliSafe.Shared.Models.Enums
@using IncliSafe.Shared.Models.Analysis
@using IncliSafe.Shared.Models.Core
@using IncliSafe.Client.Services.Interfaces
@inject IDobackService DobackService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Nuevo Análisis</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudTextField T="string" @bind-Value="_analysisModel.Name" Label="Nombre" Required="true" RequiredError="El nombre es requerido" />
                <MudTextField T="string" @bind-Value="_analysisModel.Description" Label="Descripción" Lines="3" />
                <MudSelect T="AnalysisType" @bind-Value="_analysisModel.AnalysisType" Label="Tipo de Análisis" Required="true" RequiredError="El tipo de análisis es requerido">
                    @foreach (var type in Enum.GetValues<AnalysisType>())
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
                <MudNumericField @bind-Value="_analysisModel.Score" Label="Puntuación" Required="true" RequiredError="La puntuación es requerida" />
                <MudDatePicker @bind-Date="_analysisModel.AnalyzedAt" Label="Fecha de Análisis" Required="true" RequiredError="La fecha de análisis es requerida" />
                <MudSelect T="AlertSeverity" @bind-Value="_analysisModel.Severity" Label="Severidad" Required="true" RequiredError="La severidad es requerida">
                    @foreach (var severity in Enum.GetValues<AlertSeverity>())
                    {
                        <MudSelectItem Value="@severity">@severity</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveAnalysis" Disabled="@(!_success)">Guardar</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@(() => NavigationManager.NavigateTo("/analysis"))">Cancelar</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private MudForm _form;
    private bool _success;
    private AnalysisDTO _analysisModel = new()
    {
        Name = string.Empty,
        Description = string.Empty,
        AnalysisType = AnalysisType.Doback,
        Score = 0,
        AnalyzedAt = DateTime.Now,
        VehicleId = Guid.Empty,
        Severity = AlertSeverity.Info
    };

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    private async Task SaveAnalysis()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            // TODO: Implementar guardado
            Snackbar.Add("Análisis guardado correctamente", Severity.Success);
            NavigationManager.NavigateTo("/analysis");
        }
    }
} 