@page "/analysis/history"
@using IncliSafe.Shared.Models.Enums
@using IncliSafe.Shared.Models.Analysis
@using IncliSafe.Shared.Models.Core
@using IncliSafe.Client.Services.Interfaces
@inject IDobackService DobackService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Historial de Análisis</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTable Items="@_analyses" Dense="true" Striped="true" Hover="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Nombre</MudTh>
                    <MudTh>Tipo</MudTh>
                    <MudTh>Fecha</MudTh>
                    <MudTh>Puntuación</MudTh>
                    <MudTh>Severidad</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Id</MudTd>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.AnalysisType</MudTd>
                    <MudTd>@context.AnalyzedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudTd>
                    <MudTd>@context.Score.ToString("N2")</MudTd>
                    <MudTd>
                        <MudChip Color="@(context.Severity switch { AlertSeverity.Critical => Color.Error, AlertSeverity.Error => Color.Error, AlertSeverity.Warning => Color.Warning, _ => Color.Info })">
                            @context.Severity
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" OnClick="@(() => ViewAnalysis(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteAnalysis(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/analysis/new"))">
                Nuevo Análisis
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private List<AnalysisDTO> _analyses = new();

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalyses();
    }

    private async Task LoadAnalyses()
    {
        try
        {
            // TODO: Implementar carga de análisis
            _analyses = new List<AnalysisDTO>
            {
                new()
                {
                    Id = 1,
                    Name = "Análisis de Estabilidad",
                    Description = "Análisis de estabilidad del vehículo",
                    AnalysisType = AnalysisType.Stability,
                    Score = 85.5M,
                    AnalyzedAt = DateTime.Now,
                    VehicleId = Guid.Empty,
                    Severity = AlertSeverity.Info
                }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar los análisis: {ex.Message}", Severity.Error);
        }
    }

    private void ViewAnalysis(AnalysisDTO analysis)
    {
        NavigationManager.NavigateTo($"/analysis/{analysis.Id}");
    }

    private async Task DeleteAnalysis(AnalysisDTO analysis)
    {
        var result = await DialogService.ShowMessageBox(
            "Eliminar Análisis",
            "¿Está seguro de que desea eliminar este análisis?",
            yesText: "Eliminar", noText: "Cancelar");

        if (result == true)
        {
            try
            {
                // TODO: Implementar eliminación
                _analyses.Remove(analysis);
                Snackbar.Add("Análisis eliminado correctamente", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al eliminar el análisis: {ex.Message}", Severity.Error);
            }
        }
    }
} 