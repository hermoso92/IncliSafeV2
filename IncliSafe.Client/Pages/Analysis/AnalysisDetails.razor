@page "/analysis/{Id}"
@using IncliSafe.Shared.Models.Enums
@using IncliSafe.Shared.Models.Analysis
@using IncliSafe.Shared.Models.Core
@using IncliSafe.Client.Services.Interfaces
@inject IDobackService DobackService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Detalles del Análisis</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (_analysis == null)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-4">Información General</MudText>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudText><strong>ID:</strong> @_analysis.Id</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText><strong>Nombre:</strong> @_analysis.Name</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText><strong>Descripción:</strong> @_analysis.Description</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText><strong>Tipo:</strong> @_analysis.AnalysisType</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText><strong>Fecha:</strong> @_analysis.AnalyzedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText><strong>Puntuación:</strong> @_analysis.Score.ToString("N2")</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText><strong>Severidad:</strong> 
                                        <MudChip Color="@(_analysis.Severity switch { AlertSeverity.Critical => Color.Error, AlertSeverity.Error => Color.Error, AlertSeverity.Warning => Color.Warning, _ => Color.Info })">
                                            @_analysis.Severity
                                        </MudChip>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-4">Datos del Análisis</MudText>
                            @if (_analysis.DataPoints.Any())
                            {
                                <MudTable Items="@_analysis.DataPoints" Dense="true" Striped="true" Hover="true">
                                    <HeaderContent>
                                        <MudTh>Fecha</MudTh>
                                        <MudTh>Valor</MudTh>
                                        <MudTh>Métricas</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd>@context.Timestamp.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
                                        <MudTd>@context.Value.ToString("N2")</MudTd>
                                        <MudTd>
                                            @foreach (var metric in context.AdditionalMetrics)
                                            {
                                                <MudChip Size="Size.Small" Class="ma-1">@metric.Key: @metric.Value.ToString("N2")</MudChip>
                                            }
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info">No hay datos de análisis disponibles.</MudAlert>
                            }
                        </MudPaper>
                    </MudItem>
                    @if (_analysis.Recommendations.Any())
                    {
                        <MudItem xs="12">
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.h6" Class="mb-4">Recomendaciones</MudText>
                                <MudList>
                                    @foreach (var recommendation in _analysis.Recommendations)
                                    {
                                        <MudListItem>
                                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" />
                                            <MudText>@recommendation</MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@(() => NavigationManager.NavigateTo("/analysis"))">
                Volver
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private AnalysisDTO? _analysis;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalysis();
    }

    private async Task LoadAnalysis()
    {
        try
        {
            // TODO: Implementar carga de análisis
            _analysis = new AnalysisDTO
            {
                Id = int.Parse(Id),
                Name = "Análisis de Estabilidad",
                Description = "Análisis de estabilidad del vehículo",
                AnalysisType = AnalysisType.Stability,
                Score = 85.5M,
                AnalyzedAt = DateTime.Now,
                VehicleId = Guid.Empty,
                Severity = AlertSeverity.Info,
                DataPoints = new List<AnalysisDataDTO>
                {
                    new()
                    {
                        Timestamp = DateTime.Now.AddHours(-1),
                        Value = 82.5M,
                        SensorId = 1,
                        AdditionalMetrics = new Dictionary<string, decimal>
                        {
                            { "Roll", 2.5M },
                            { "Pitch", 1.8M },
                            { "Yaw", 3.2M }
                        }
                    }
                },
                Recommendations = new List<string>
                {
                    "Revisar la suspensión del vehículo",
                    "Verificar la presión de los neumáticos",
                    "Realizar un alineamiento"
                }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar el análisis: {ex.Message}", Severity.Error);
        }
    }
} 