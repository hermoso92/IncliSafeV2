@page "/usuarios"
@attribute [Authorize(Roles = "Administrador")]
@using IncliSafe.Shared.Models
@inject UsuarioService UsuarioService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<PageHeader Title="Usuarios"
           ShowAddButton="true"
           AddButtonText="Nuevo Usuario"
           OnAddClick="@(() => OpenDialog(new Usuario()))" />

<LoadingComponent IsLoading="@_loading" Message="Cargando usuarios..." />

@if (!_loading)
{
    @if (_error)
    {
        <ErrorComponent Message="@_errorMessage" 
                       ShowRetry="true" 
                       OnRetryClick="LoadUsuarios" />
    }
    else
    {
        <MudTable Items="@GetFilteredUsuarios()" 
                  Dense="true" 
                  Hover="true" 
                  Striped="true"
                  Loading="@_loading"
                  Breakpoint="Breakpoint.Sm">
                    <ToolBarContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="flex-grow-1">
                            <MudTextField @bind-Value="_searchString" 
                                         Placeholder="Buscar..." 
                                         Adornment="Adornment.Start"
                                         AdornmentIcon="@Icons.Material.Filled.Search"
                                         IconSize="Size.Medium" 
                                         Class="mt-0"
                                         Immediate="true"
                                         DebounceInterval="300"/>
                            <MudSelect T="string" 
                                      Label="Rol" 
                                      @bind-Value="_selectedRol"
                                      Clearable="true">
                                <MudSelectItem Value="@("Administrador")">Administrador</MudSelectItem>
                                <MudSelectItem Value="@("Inspector")">Inspector</MudSelectItem>
                                <MudSelectItem Value="@("Usuario")">Usuario</MudSelectItem>
                            </MudSelect>
                            <MudSelect T="bool?" 
                                      Label="Estado" 
                                      @bind-Value="_selectedEstado"
                                      Clearable="true">
                                <MudSelectItem Value="@true">Activo</MudSelectItem>
                                <MudSelectItem Value="@false">Inactivo</MudSelectItem>
                            </MudSelect>
                        </MudStack>
                        <MudTooltip Text="Exportar a Excel">
                            <MudIconButton Icon="@Icons.Material.Filled.FileDownload"
                                          Color="Color.Primary"
                                          OnClick="ExportToExcel" />
                        </MudTooltip>
                        <MudTooltip Text="Limpiar filtros">
                            <MudIconButton Icon="@Icons.Material.Filled.FilterAltOff"
                                          Color="Color.Default"
                                          OnClick="ResetFilters" />
                        </MudTooltip>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Rol</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Rol">
                            <MudChip Color="@GetRolColor(context.Rol)" Size="Size.Small">
                                @context.Rol
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Estado">
                            <MudChip Color="@(context.Activo ? Color.Success : Color.Error)" Size="Size.Small">
                                @(context.Activo ? "Activo" : "Inactivo")
                            </MudChip>
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                         Color="Color.Primary"
                                         Size="Size.Small"
                                         OnClick="@(() => OpenDialog(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                         Color="Color.Error"
                                         Size="Size.Small"
                                         OnClick="@(() => DeleteUsuario(context))" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No hay usuarios registrados.</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
    }
}

@code {
    private List<Usuario> usuarios = new();
    private bool _loading = true;
    private bool _error;
    private string _errorMessage = "";
    private string _searchString = "";
    private string? _selectedRol;
    private bool? _selectedEstado;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsuarios();
    }

    private async Task LoadUsuarios()
    {
        try
        {
            _loading = true;
            _error = false;
            usuarios = await UsuarioService.GetUsuarios();
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenDialog(Usuario usuario)
    {
        var parameters = new DialogParameters
        {
            ["Usuario"] = new Usuario 
            { 
                Id = usuario.Id,
                Nombre = usuario.Nombre,
                Email = usuario.Email,
                Password = usuario.Password,
                Rol = usuario.Rol,
                Activo = usuario.Activo
            }
        };

        var dialog = await DialogService.ShowAsync<UsuarioDialog>(
            usuario.Id == 0 ? "Nuevo Usuario" : "Editar Usuario", 
            parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var editedUsuario = (Usuario)result.Data;
            try
            {
                if (editedUsuario.Id == 0)
                {
                    await UsuarioService.CreateUsuario(editedUsuario);
                }
                else
                {
                    await UsuarioService.UpdateUsuario(editedUsuario);
                }
                await LoadUsuarios();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteUsuario(Usuario usuario)
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Eliminar Usuario",
            ["Message"] = $"¿Está seguro de eliminar al usuario {usuario.Nombre}?",
            ["Color"] = Color.Error,
            ["ConfirmText"] = "Eliminar"
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await UsuarioService.DeleteUsuario(usuario.Id);
                await LoadUsuarios();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetRolColor(string rol) => rol switch
    {
        "Administrador" => Color.Error,
        "Inspector" => Color.Warning,
        "Usuario" => Color.Info,
        _ => Color.Default
    };

    private IEnumerable<Usuario> GetFilteredUsuarios()
    {
        return usuarios
            .Where(u => 
                (string.IsNullOrWhiteSpace(_searchString) || 
                 u.Nombre.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                 u.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) &&
                (_selectedRol == null || u.Rol == _selectedRol) &&
                (_selectedEstado == null || u.Activo == _selectedEstado))
            .OrderBy(u => u.Nombre);
    }

    private void ResetFilters()
    {
        _searchString = "";
        _selectedRol = null;
        _selectedEstado = null;
    }

    private async Task ExportToExcel()
    {
        try
        {
            var filteredData = GetFilteredUsuarios();
            var fileName = $"usuarios_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            var csv = new StringBuilder();
            
            // Encabezados
            csv.AppendLine("ID,Nombre,Email,Rol,Estado");
            
            // Datos
            foreach (var user in filteredData)
            {
                csv.AppendLine($"{user.Id},{user.Nombre},{user.Email},{user.Rol},{(user.Activo ? "Activo" : "Inactivo")}");
            }

            // Crear el archivo y descargarlo
            var bytes = Encoding.UTF8.GetBytes(csv.ToString());
            await JS.InvokeVoidAsync("downloadFile", fileName, "text/csv", Convert.ToBase64String(bytes));
            
            Snackbar.Add("Archivo exportado correctamente", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al exportar: {ex.Message}", Severity.Error);
        }
    }
}
