@page "/inspecciones"
@attribute [Authorize]
@using IncliSafe.Client.Shared.Dialogs
@using IncliSafe.Client.Dialogs
@using IncliSafe.Shared.Models.Entities
@using IncliSafe.Shared.Models.DTOs
@inject IInspeccionService InspeccionService
@inject VehiculoService VehiculoService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageHeader Title="Inspecciones"
           ShowAddButton="true"
           AddButtonText="Nueva Inspección"
           OnAddClick="@(() => OpenDialog(null))" />

<LoadingComponent IsLoading="@_loading" Message="Cargando inspecciones..." />

@if (!_loading)
{
    @if (_error)
    {
        <ErrorComponent Message="@_errorMessage" 
                       ShowRetry="true" 
                       OnRetryClick="LoadData" />
    }
    else
    {
        <MudTable Items="@inspecciones" 
                  Dense="true" 
                  Hover="true" 
                  Striped="true"
                  Loading="@_loading"
                  Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Vehículo</MudTh>
                <MudTh>Fecha</MudTh>
                <MudTh>Estado</MudTh>
                <MudTh>Observaciones</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Vehículo">
                    <MudText>
                        @(context.Vehiculo?.Placa ?? "-") - @(context.Vehiculo?.Marca ?? "") @(context.Vehiculo?.Modelo ?? "")
                    </MudText>
                </MudTd>
                <MudTd DataLabel="Fecha">
                    @context.Fecha.ToShortDateString()
                </MudTd>
                <MudTd DataLabel="Estado">
                    <MudChip Color="@GetEstadoColor(context.Observaciones)" Size="Size.Small">
                        @context.Observaciones
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Observaciones">
                    <MudText Typo="Typo.body2">@context.Observaciones</MudText>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                 Color="Color.Primary"
                                 Size="Size.Small"
                                 OnClick="@(() => OpenDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                 Color="Color.Error"
                                 Size="Size.Small"
                                 OnClick="@(() => DeleteInspeccion(context))" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No hay inspecciones registradas.</MudText>
            </NoRecordsContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code {
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private List<InspeccionDTO> inspecciones = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            _error = false;
            inspecciones = await InspeccionService.GetInspeccionesAsync();
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
            Snackbar.Add("Error al cargar las inspecciones", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenDialog(InspeccionDTO? inspeccion)
    {
        var parameters = new DialogParameters
        {
            ["Inspeccion"] = inspeccion ?? new InspeccionDTO()
        };

        var dialog = await DialogService.ShowAsync<IncliSafe.Client.Shared.Dialogs.InspeccionDialog>(
            inspeccion == null ? "Nueva Inspección" : "Editar Inspección",
            parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task DeleteInspeccion(InspeccionDTO inspeccion)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Está seguro de eliminar esta inspección?",
            ["ButtonText"] = "Eliminar",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar eliminación", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await InspeccionService.DeleteInspeccionAsync(inspeccion.Id);
            await LoadData();
            Snackbar.Add("Inspección eliminada correctamente", Severity.Success);
        }
    }

    private Color GetEstadoColor(string estado) => estado switch
    {
        "Completada" => Color.Success,
        "En Proceso" => Color.Warning,
        "Pendiente" => Color.Info,
        "Cancelada" => Color.Error,
        _ => Color.Default
    };
}
