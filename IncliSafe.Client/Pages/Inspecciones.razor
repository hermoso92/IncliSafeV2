@page "/inspecciones"
@attribute [Authorize]
@using IncliSafe.Client.Shared.Dialogs
@using IncliSafe.Client.Dialogs
@using IncliSafe.Shared.Models.Entities
@using IncliSafe.Shared.Models.DTOs
@inject IInspeccionService InspeccionService
@inject VehiculoService VehiculoService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageHeader Title="Inspecciones"
           ShowAddButton="true"
           AddButtonText="Nueva Inspección"
           OnAddClick="@(() => OpenDialog(null))" />

<LoadingComponent IsLoading="@_loading" Message="Cargando inspecciones..." />

@if (!_loading)
{
    @if (_error)
    {
        <ErrorComponent Message="@_errorMessage" 
                       ShowRetry="true" 
                       OnRetryClick="LoadData" />
    }
    else
    {
        <MudTable Items="@inspecciones" 
                  Dense="true" 
                  Hover="true" 
                  Striped="true"
                  Loading="@_loading"
                  Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Vehículo</MudTh>
                <MudTh>Fecha</MudTh>
                <MudTh>Resultado</MudTh>
                <MudTh>Estado</MudTh>
                <MudTh>Ubicación</MudTh>
                <MudTh>Costo</MudTh>
                <MudTh>Próxima</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Vehículo">
                    <MudText>
                        @(context.Vehicle?.Placa ?? "-") - @(context.Vehicle?.Marca ?? "") @(context.Vehicle?.Modelo ?? "")
                    </MudText>
                </MudTd>
                <MudTd DataLabel="Fecha">
                    @context.FechaInspeccion.ToShortDateString()
                </MudTd>
                <MudTd DataLabel="Resultado">
                    <MudText>@context.Resultado</MudText>
                </MudTd>
                <MudTd DataLabel="Estado">
                    <MudChip Color="@(context.Aprobada ? Color.Success : Color.Error)" Size="Size.Small">
                        @(context.Aprobada ? "Aprobada" : "No Aprobada")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Ubicación">
                    <MudText>@context.UbicacionInspeccion</MudText>
                </MudTd>
                <MudTd DataLabel="Costo">
                    <MudText>@context.CostoInspeccion.ToString("C2")</MudText>
                </MudTd>
                <MudTd DataLabel="Próxima">
                    @(context.FechaProximaInspeccion?.ToShortDateString() ?? "-")
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                 Color="Color.Primary"
                                 Size="Size.Small"
                                 OnClick="@(() => OpenDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                 Color="Color.Error"
                                 Size="Size.Small"
                                 OnClick="@(() => DeleteInspeccion(context))" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No hay inspecciones registradas.</MudText>
            </NoRecordsContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code {
    private bool _loading = true;
    private bool _error;
    private string _errorMessage = string.Empty;
    private List<Inspeccion> inspecciones = new();
    private List<Vehicle> vehiculos = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            _error = false;
            inspecciones = await InspeccionService.GetInspeccionesAsync();
            vehiculos = await VehiculoService.GetVehiculos();
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
            Snackbar.Add("Error al cargar las inspecciones", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenDialog(Inspeccion? inspeccion)
    {
        var parameters = new DialogParameters
        {
            ["Inspeccion"] = inspeccion ?? new Inspeccion(),
            ["Vehiculos"] = vehiculos
        };

        var dialog = await DialogService.ShowAsync<InspeccionDialog>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var editedInspeccion = (Inspeccion)result.Data;
                if (editedInspeccion.Id == 0)
                {
                    await InspeccionService.CreateInspeccionAsync(editedInspeccion);
                    Snackbar.Add("Inspección creada correctamente", Severity.Success);
                }
                else
                {
                    await InspeccionService.UpdateInspeccionAsync(editedInspeccion);
                    Snackbar.Add("Inspección actualizada correctamente", Severity.Success);
                }
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteInspeccion(Inspeccion inspeccion)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Está seguro que desea eliminar esta inspección?",
            ["ButtonText"] = "Eliminar",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await InspeccionService.DeleteInspeccionAsync(inspeccion.Id);
                Snackbar.Add("Inspección eliminada correctamente", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }
}
