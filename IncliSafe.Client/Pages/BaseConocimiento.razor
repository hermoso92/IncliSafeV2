@page "/conocimiento"
@attribute [Authorize(Roles = "Administrador")]
@inject IKnowledgeBaseService KnowledgeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageHeader Title="Base de Conocimiento"
           ShowAddButton="true"
           AddButtonText="Nuevo Patrón"
           OnAddClick="@(() => OpenPatternDialog(null))" />

<MudGrid>
    <!-- Patrones Detectados -->
    <MudItem xs="12" md="8">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Patrones Detectados</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@_patterns" Dense="true" Hover="true" Loading="@_loading">
                    <HeaderContent>
                        <MudTh>Tipo</MudTh>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Confianza</MudTh>
                        <MudTh>Detecciones</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudChip Color="@GetPatternColor(context.PatternType)" Size="Size.Small">
                                @context.PatternType
                            </MudChip>
                        </MudTd>
                        <MudTd>@context.PatternName</MudTd>
                        <MudTd>@(context.Confidence.ToString("P1"))</MudTd>
                        <MudTd>@context.TimesDetected</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                         Size="Size.Small"
                                         OnClick="@(() => OpenPatternDialog(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                         Size="Size.Small"
                                         OnClick="@(() => ShowPatternDetails(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Estadísticas -->
    <MudItem xs="12" md="4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Estadísticas</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList>
                    <MudListItem>
                        <MudChip Color="Color.Primary">Ejemplo</MudChip>
                    </MudListItem>
                </MudList>
            </MudCardContent>
        </MudCard>

        <MudCard Class="mt-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Distribución de Patrones</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudChart ChartType="ChartType.Pie" 
                         InputData="@_patternDistribution.Values.ToArray()"
                         InputLabels="@_patternDistribution.Keys.ToArray()" />
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private bool _loading = true;
    private List<KnowledgePattern> _patterns = new();
    private KnowledgeStats _stats = new();
    private Dictionary<string, double> _patternDistribution = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            _patterns = await KnowledgeService.GetPatterns();
            _stats = await KnowledgeService.GetStats();
            _patternDistribution = await KnowledgeService.GetPatternDistribution();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetPatternColor(string patternType) => patternType switch
    {
        "Stability" => Color.Primary,
        "Maintenance" => Color.Warning,
        "Performance" => Color.Info,
        "Safety" => Color.Error,
        _ => Color.Default
    };

    private async Task OpenPatternDialog(KnowledgePattern? pattern)
    {
        var parameters = new DialogParameters
        {
            ["Pattern"] = pattern ?? new KnowledgePattern(),
            ["IsNew"] = pattern == null
        };

        var dialog = await DialogService.ShowAsync<PatternDialog>(
            pattern == null ? "Nuevo Patrón" : "Editar Patrón",
            parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task ShowPatternDetails(KnowledgePattern pattern)
    {
        var parameters = new DialogParameters
        {
            ["Pattern"] = pattern
        };

        await DialogService.ShowAsync<PatternDetailsDialog>("Detalles del Patrón", parameters);
    }
} 