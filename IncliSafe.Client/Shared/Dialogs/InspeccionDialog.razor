@using IncliSafe.Client.Shared.Dialogs
@using IncliSafe.Shared.Models.Entities
@using IncliSafe.Shared.Models.DTOs
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudDatePicker @bind-Date="fecha"
                              Label="Fecha"
                              @bind-Date:after="OnFechaChanged"
                              Required="true" />
            </MudItem>

            <MudItem xs="12">
                <MudSelect T="string" @bind-Value="inspeccion.Estado"
                          Label="Estado">
                    <MudSelectItem Value="@("Pendiente")">Pendiente</MudSelectItem>
                    <MudSelectItem Value="@("En Proceso")">En Proceso</MudSelectItem>
                    <MudSelectItem Value="@("Completada")">Completada</MudSelectItem>
                    <MudSelectItem Value="@("Cancelada")">Cancelada</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="inspeccion.Observaciones"
                             Label="Observaciones"
                             Lines="3" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private InspeccionDTO inspeccion = new();
    private DateTime? fecha;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private void OnFechaChanged()
    {
        if (fecha.HasValue)
        {
            inspeccion.Fecha = fecha.Value;
        }
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(inspeccion));
    private void Cancel() => MudDialog.Cancel();

    public class DateTimeValidator : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is DateTime date)
            {
                return date <= DateTime.UtcNow 
                    ? ValidationResult.Success 
                    : new ValidationResult("La fecha no puede ser futura");
            }
            return new ValidationResult("Fecha invÃ¡lida");
        }
    }
} 