IncliSafe | Proyecto Completo y Listo para Visual Studio 2022 (Desde Cero, Detallado y Visualmente Optimizado)
📌 Objetivo:
Crear un sistema completo y funcional desde cero, asegurando que:

🔹 Toda la interfaz sea clara y visualmente atractiva.
🔹 Cada apartado debe verse sin necesidad de hacer scroll.
🔹 Diseño tipo Dashboard donde toda la información sea accesible en una sola vista.
🔹 Optimización del espacio con tarjetas, gráficos y tablas bien organizadas.
🔹 Cero saturación visual, manteniendo una jerarquía clara de información.

🔥 Stack Tecnológico Completo
💻 Frontend - Blazor WebAssembly (.NET 8) + MudBlazor
✅ SPA con Blazor WebAssembly para una experiencia fluida.
✅ UI basada en MudBlazor con una distribución visual optimizada.
✅ Autenticación con JWT para seguridad basada en usuarios y roles.
✅ Subida de archivos y gestión de vehículos de manera intuitiva.
✅ Gráficos interactivos y visualización de métricas en tiempo real.
✅ Interfaz adaptativa para que se vea bien en cualquier dispositivo sin scroll innecesario.

🖥 Backend - API RESTful con ASP.NET Core 8
✅ Autenticación con JWT para controlar el acceso.
✅ Manejo de archivos y validación estructural.
✅ Procesamiento y almacenamiento de datos en PostgreSQL.
✅ WebSockets con SignalR para actualizaciones dinámicas.
✅ Capa de servicios modular con lógica de negocio bien separada.

📊 Base de Datos - PostgreSQL
✅ ORM con Entity Framework Core para manejo eficiente de datos.
✅ Tablas relacionadas para usuarios, vehículos y archivos.
✅ Índices y consultas optimizadas para rendimiento.

🎨 Optimización Visual | Diseño sin Scroll
Para que el usuario vea toda la información sin necesidad de hacer scroll, el sistema usará:

📌 Diseño tipo Dashboard
✔ Distribución por tarjetas y módulos organizados en cuadrícula.
✔ Cada sección estará bien diferenciada sin sobrecargar la pantalla.
✔ Uso de pestañas y menús laterales para navegación rápida sin desplazamiento vertical.
✔ Gráficos y reportes compactos, fáciles de leer y de interpretar.
✔ Componentes de carga rápida para evitar esperas innecesarias.

🛠 Flujos de Funcionalidad Detallados
🔹 Flujo 1: Autenticación de Usuarios con JWT
📌 Objetivo: Controlar el acceso y garantizar que cada usuario solo vea sus propios vehículos y archivos.

🔹 Pasos:
1️⃣ Registro de usuario con validación de datos.
2️⃣ Inicio de sesión con generación de JWT.
3️⃣ Roles de usuario definidos para permisos específicos.
4️⃣ Protección de endpoints para evitar accesos no autorizados.

🔹 Flujo 2: Gestión de Vehículos del Usuario
📌 Objetivo: Permitir a los usuarios registrar y administrar sus vehículos.

🔹 Pasos:
1️⃣ Registro de un vehículo con datos clave.
2️⃣ Asignación de archivos de datos al vehículo.
3️⃣ Visualización del estado del vehículo en el Dashboard.
4️⃣ Posibilidad de eliminar o modificar vehículos existentes.

🔹 Flujo 3: Subida y Procesamiento de Archivos
📌 Objetivo: Gestionar archivos de telemetría (TXT, CSV) y analizarlos.

🔹 Estructura esperada de los archivos:
Cada archivo contiene datos como:

ax, ay, az (aceleración en los ejes X, Y, Z).
gx, gy, gz (giroscopio en los ejes X, Y, Z).
roll, pitch, yaw (orientación del vehículo).
timeantwifi (timestamp de la medición).
usciclo1 - usciclo5 (datos de ciclos de operación).
accmag, microslimpiarcan, erroresCAN (datos de sensores).
speed, steer (velocidad y dirección del vehículo).
🔹 Pasos:
1️⃣ El usuario selecciona un archivo y lo sube desde la interfaz.
2️⃣ El archivo se valida para asegurar que cumple con la estructura.
3️⃣ Se almacena en la base de datos y se asocia a un vehículo.
4️⃣ El sistema procesa los datos y genera métricas relevantes.
5️⃣ El usuario visualiza gráficos y estadísticas en el Dashboard.

🔹 Flujo 4: Visualización de Datos en Tiempo Real
📌 Objetivo: Mostrar métricas de los archivos subidos de forma clara e interactiva.

🔹 Pasos:
1️⃣ Consulta de datos desde la base de datos.
2️⃣ Cálculo de tendencias y patrones.
3️⃣ Renderizado de gráficos interactivos.
4️⃣ Actualización en tiempo real mediante WebSockets.

🔹 Flujo 5: Descarga de Reportes en PDF
📌 Objetivo: Generar y exportar reportes basados en los datos analizados.

🔹 Pasos:
1️⃣ El usuario selecciona un vehículo y un período de datos.
2️⃣ El sistema genera un reporte en PDF con gráficos y estadísticas.
3️⃣ El usuario puede descargar y compartir el reporte.

📂 Estructura del Proyecto (Directorio y Archivos)
El proyecto se organizará en carpetas para mantener una estructura limpia y escalable.

📁 Frontend (Blazor WebAssembly)

Páginas:
Dashboard (visualización general).
Vehículos (gestión de vehículos).
Subida de archivos (gestión de datos).
Reportes (descarga y análisis).
Componentes reutilizables:
Subida de archivos.
Gráficos interactivos.
Tablas de datos.
📁 Backend (API ASP.NET Core 8)

Controladores:
Autenticación (gestión de usuarios).
Vehículos (registro y administración).
Archivos (subida y procesamiento).
Análisis (cálculo de métricas).
Servicios:
Manejo de archivos.
Generación de reportes.
📁 Base de Datos (PostgreSQL)

Tablas:
Usuarios.
Vehículos.
Archivos subidos.
Datos procesados.
📁 Configuración CI/CD

Integración con GitHub Actions.
Dockerfile para despliegue en VPS.
Logs y monitoreo con Serilog.
📌 Requisitos Finales para Replit Pro
✅ Generar código listo para copiar y pegar en Visual Studio 2022.
✅ Que la UI esté completamente optimizada sin scroll.
✅ Que todos los flujos estén integrados y funcionando.
✅ Que la estructura del código sea modular y escalable.
✅ Que incluya autenticación y seguridad por usuario.
✅ Que use las mejores prácticas en rendimiento y organización.

📌 Este proyecto debe ejecutarse con un solo dotnet run y funcionar completamente en Visual Studio 2022. 🚀